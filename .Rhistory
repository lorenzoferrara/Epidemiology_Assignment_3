library(sparr)
chp <- risk(cases,controls, adapt = T)
#he's using the log of the ... density
M = max(chp$rr)
m = min(chp$rr)
par(mfrow=c(1,1), font = 2, font.axis = 2, font.lab = 4, las = 1, mar = c(0, 0, 1, 0))
plot(chp$rr, gamma = 1.3, main="Relative risk", col=beachcolours(c(m,M)))
cellsize<-chp$rr$xstep*chp$rr$xstep
rho0<-0 # For Log-densities
ratiorho <- cellsize*sum((chp$rr$v-rho0)^2,na.rm=T)
ratiorho
# Permutation function
perm_rr<-function(){
new_ch<-rlabel(pbc.p)
num = length(pbc.p$x)
indices = sample(1:num)
new_cases <- split(new_ch,  f = pbc.p$marks[indices])$case
new_controls <- split(new_ch, f = pbc.p$marks[indices])$control
new_chp <- risk(new_cases,new_controls)
cellsize<-new_chp$rr$xstep*new_chp$rr$ystep
ratio_perm <- cellsize*sum((new_chp$rr$v-rho0)^2,na.rm=T)
ratio_perm
}
nsim<-99
set.seed(2022)
rperm<-sapply(1:nsim,function(i) perm_rr())
rperm
(sum(rperm > ratiorho)+1)/(nsim+1)
s=seq(0,1400,by=100)
khcases<-Kest(cases, r=s, correction="best")
khcontrols<-Kest(controls, r=s, correction="best")
plot(khcases, legend=T)
lines(khcontrols$r,khcontrols$iso,lty=2, col="blue")
Kdif<-function(X, r, cr="iso")
{
k1<-Kest(X[marks(X)=="case"], r=r, correction=cr)
k2<-Kest(X[marks(X)=="control"], r=r, correction=cr)
D=k1[[cr]]-k2[[cr]]
res<-data.frame(r=r, D=D)
return(fv(res, valu="D", fname="D"))
}
nsim<-39
# envKdif<-envelope(pbc.p, Kdif, r=s ,nsim=nsim, savefuns=TRUE,simulate=expression(rlabel(pbc.p)))
plot(envKdif,legend=F)
# rperm
cases = split(pbc.p, pbc.data$marks)$case
controls = split(pbc.p, pbc.data$marks)$control
par(mfrow=c(1,1), font = 2, font.axis = 2, font.lab = 4, las = 1, mar = c(0, 0, 1, 0))
plot(pbc.p$window, main = "Primary Biliary Cirrhosis data")
points(controls, pch = 3, col = "green")
points(cases, pch = 16, col = "red")
legend("right", c("control", "case"), pch = c(3, 16), col=c("green", "red"), bty = "n", cex = 1.2)
cases = split(pbc.p, pbc.data$marks)$case
controls = split(pbc.p, pbc.data$marks)$control
par(mfrow=c(1,1), font = 2, font.axis = 2, font.lab = 4, las = 1, mar = c(0, 0, 2.5, 0))
plot(pbc.p$window, main = "Primary Biliary Cirrhosis data")
points(controls, pch = 3, col = "green")
points(cases, pch = 16, col = "red")
legend("right", c("control", "case"), pch = c(3, 16), col=c("green", "red"), bty = "n", cex = 1.2)
library(sparr)
chp <- risk(cases,controls, adapt = T)
data(chorley)
chorley$x
range(chorley$x)
max(dist(chorley))
max(chorley$x)-min(chorley$x)
max(chorley$y)-min(chorley$y)
max(chorley$x)-min(chorley$x)
max(pbc.data$x)-min(pbc.data$x)
max(pbc.data$y)-min(pbc.data$y)
Kdif<-function(X, r, cr="iso")
{
k1<-Kest(X[marks(X)=="case"], r=r, correction=cr)
k2<-Kest(X[marks(X)=="control"], r=r, correction=cr)
D=k1[[cr]]-k2[[cr]]
res<-data.frame(r=r, D=D)
return(fv(res, valu="D", fname="D"))
}
nsim<-39
envKdif<-envelope(pbc.p, Kdif, r=s ,nsim=nsim, savefuns=TRUE,simulate=expression(rlabel(pbc.p)))
s=seq(0,14,by=100)
khcases<-Kest(cases, r=s, correction="best")
s=seq(0,14,by=100)
khcases<-Kest(cases, r=s, correction="best")
1400/100
s=seq(0,14,length=100)
khcases<-Kest(cases, r=s, correction="best")
khcontrols<-Kest(controls, r=s, correction="best")
s=seq(0,14,length=15)
khcases<-Kest(cases, r=s, correction="best")
khcontrols<-Kest(controls, r=s, correction="best")
plot(khcases, legend=T)
lines(khcontrols$r,khcontrols$iso,lty=2, col="blue")
Kdif<-function(X, r, cr="iso")
{
k1<-Kest(X[marks(X)=="case"], r=r, correction=cr)
k2<-Kest(X[marks(X)=="control"], r=r, correction=cr)
D=k1[[cr]]-k2[[cr]]
res<-data.frame(r=r, D=D)
return(fv(res, valu="D", fname="D"))
}
nsim<-39
envKdif<-envelope(pbc.p, Kdif, r=s ,nsim=nsim, savefuns=TRUE,simulate=expression(rlabel(pbc.p)))
plot(envKdif,legend=F)
s=seq(0,140,length=15)
khcases<-Kest(cases, r=s, correction="best")
khcontrols<-Kest(controls, r=s, correction="best")
plot(khcases, legend=T)
lines(khcontrols$r,khcontrols$iso,lty=2, col="blue")
s=seq(0,1400,length=15)
khcases<-Kest(cases, r=s, correction="best")
khcontrols<-Kest(controls, r=s, correction="best")
plot(khcases, legend=T)
lines(khcontrols$r,khcontrols$iso,lty=2, col="blue")
Kdif<-function(X, r, cr="iso")
{
k1<-Kest(X[marks(X)=="case"], r=r, correction=cr)
k2<-Kest(X[marks(X)=="control"], r=r, correction=cr)
D=k1[[cr]]-k2[[cr]]
res<-data.frame(r=r, D=D)
return(fv(res, valu="D", fname="D"))
}
nsim<-39
envKdif<-envelope(pbc.p, Kdif, r=s ,nsim=nsim, savefuns=TRUE,simulate=expression(rlabel(pbc.p)))
s=seq(0,500,length=15)
khcases<-Kest(cases, r=s, correction="best")
khcontrols<-Kest(controls, r=s, correction="best")
plot(khcases, legend=T)
lines(khcontrols$r,khcontrols$iso,lty=2, col="blue")
legend
plot(khcases, legend=T)
lines(khcontrols$r,khcontrols$iso,lty=2, col="blue")
legend
plot(khcases, legend=T)
lines(khcontrols$r,khcontrols$iso,lty=2, col="blue")
legend()
plot(khcases, legend=T)
lines(khcontrols$r,khcontrols$iso,lty=2, col="blue")
# legend()
plot(envKdif,legend=F)
Kdif<-function(X, r, cr="iso")
{
k1<-Kest(X[marks(X)=="case"], r=r, correction=cr)
k2<-Kest(X[marks(X)=="control"], r=r, correction=cr)
D=k1[[cr]]-k2[[cr]]
res<-data.frame(r=r, D=D)
return(fv(res, valu="D", fname="D"))
}
nsim<-39
envKdif<-envelope(pbc.p, Kdif, r=s ,nsim=nsim, savefuns=TRUE,simulate=expression(rlabel(pbc.p)))
plot(envKdif,legend=F)
simfuns<-as.data.frame(attr(envKdif, "simfuns"))[,-1]
khcovdiag<-apply(simfuns, 1, var)
T0<-sum( ((khcases$iso-khcontrols$iso)/sqrt(khcovdiag))[-1])
T_pm<-apply(simfuns, 2, function(X){
sum((X/sqrt(khcovdiag))[-1])
})
pvalue<-2*(sum(abs(T_pm)>abs(T0))+1)/(nsim+1)
pvalue
s=seq(0,50,length=15)
khcases<-Kest(cases, r=s, correction="best")
khcontrols<-Kest(controls, r=s, correction="best")
plot(khcases, legend=T)
lines(khcontrols$r,khcontrols$iso,lty=2, col="blue")
# legend()
Kdif<-function(X, r, cr="iso")
{
k1<-Kest(X[marks(X)=="case"], r=r, correction=cr)
k2<-Kest(X[marks(X)=="control"], r=r, correction=cr)
D=k1[[cr]]-k2[[cr]]
res<-data.frame(r=r, D=D)
return(fv(res, valu="D", fname="D"))
}
nsim<-39
envKdif<-envelope(pbc.p, Kdif, r=s ,nsim=nsim, savefuns=TRUE,simulate=expression(rlabel(pbc.p)))
plot(envKdif,legend=F)
simfuns<-as.data.frame(attr(envKdif, "simfuns"))[,-1]
khcovdiag<-apply(simfuns, 1, var)
T0<-sum( ((khcases$iso-khcontrols$iso)/sqrt(khcovdiag))[-1])
T_pm<-apply(simfuns, 2, function(X){
sum((X/sqrt(khcovdiag))[-1])
})
pvalue<-2*(sum(abs(T_pm)>abs(T0))+1)/(nsim+1)
pvalue
pvalue<-2*(sum(abs(T_pm)>abs(T0))+1)/(nsim+1)
pvalue
T_pm
simfuns
{r}
khcases
T0
par(mfrow=c(1,1), font = 2, font.axis = 2, font.lab = 4, las = 1, mar = c(0, 0, 1, 0))
plot(model1, se = F, locations = islet_window)
# knitr::opts_chunk$set( echo=T )
knitr::opts_chunk$set( cache=T )
knitr::opts_chunk$set(out.width = '70%')
knitr::opts_chunk$set(fig.align = "center")
knitr::opts_chunk$set(tidy =TRUE)
knitr::opts_chunk$set(message = FALSE)
library(spatstat)
rm(list=ls())
nucli84 <- read.delim("T2/nucli84.txt")
min.X = min(nucli84$X)
min.Y = min(nucli84$Y)
max.X = max(nucli84$X)
max.Y = max(nucli84$Y)
nucli84$X = nucli84$X - min.X
nucli84$Y = nucli84$Y - min.Y
n84=ppp(x = nucli84$X, y = nucli84$Y, range(nucli84$X), range(nucli84$Y))
poligon=read.delim("T2/poly84.txt")
poligon$X = poligon$X - min.X
poligon$Y = poligon$Y - min.Y
pol.illa<-list(x=poligon$X,y=poligon$Y)
min.pX = min(poligon$X)
min.pY = min(poligon$Y)
max.pX = max(poligon$X)
max.pY = max(poligon$Y)
n84p=ppp(nucli84$X,nucli84$Y,poly=pol.illa, range(poligon$X), range(poligon$Y))
islet_window = owin(poly = pol.illa)
par(mfrow=c(1,1), font = 2, font.axis = 2, font.lab = 4, las = 1, mar = c(2, 0, 1, 0))
plot(n84p,main="Nests")
axis(1,at=c(round(seq(min.pX, max.pX,length=10),digits=0)))#, pos=c(0,0))
axis(2,at=c(round(seq(min.pY, max.pY,length=10),digits=0)), pos=c(min.pX-4,min.pY-50))
par(mfrow=c(1,1), font = 2, font.axis = 2, font.lab = 4, las = 1, mar = c(0, 0, 1, 0))
plot(density(n84p, dimax.Yx=c(256,256), sigma=15), main="Intensity of the point process")
M <- quadrat.test(n84, nx = 4, ny = 2)
par(mfrow=c(1,1), font = 2, font.axis = 2, font.lab = 4, las = 1, mar = c(0, 0, 0, 0))
plot(n84,main="" )
plot(M, add = TRUE)
M
KS=cdf.test(n84,covariate="x")
KS
plot(KS)
KS=cdf.test(n84,covariate="y")
KS
plot(KS)
grid <- read.delim("T2/grid.txt")
grid.veg = read.delim("T2/grid_veg.txt")
veg = as.matrix(read.delim("T2/veg.txt",header=FALSE))
height = as.matrix(read.delim("T2/height.txt", header=FALSE))
par(mfrow=c(1,2), font = 2, font.axis = 2, font.lab = 4, las = 1, mar = c(0, 0, 1, 2))
Height = im(mat = height, xcol = grid$x, yrow = grid$y)
plot(Height, main="Height", clipwin = islet_window)
plot(n84p, add=T, cex=0.5, pch=16)
Vegetation = im(mat = veg, xcol = grid.veg$x, yrow = grid.veg$y)
plot( Vegetation, main="Vegetation", clipwin = islet_window)
plot(n84p, add=T, cex=0.5, pch=16)
#height
brks.h <- c(0,10,20,40)
Hcut <- cut(Height, breaks = brks.h, labels = c("0-10", "10-20", "20-40"))
H <- tess(image = Hcut)
#vegetation
brks.v <- c(0, 20, 50, 100)
Vcut <- cut(Vegetation, breaks = brks.v, labels = c("0-20", "20-50", "50-100"))
V <- tess(image = Vcut)
par(mfrow=c(1,2), font = 2, font.axis = 2, font.lab = 4, las = 1, mar = c(0, 0, 1, 3.5))
plot(H, main="Height")
plot(V, main="Vegetation")
M.h=quadrat.test(n84, tess = H)
M.h
M.v=quadrat.test(n84p, tess = V)
M.v
par(mfrow=c(1,2), font = 2, font.axis = 2, font.lab = 4, las = 1, mar = c(0, 0, 1, 3.5))
plot(M.h, valuesAreColours=FALSE, main="Height", cex=0.6)
plot(M.v, valuesAreColours=FALSE, main="Vegetation", cex=0.6)
KS <- cdf.test(n84, Height)
KS
plot(KS,style="QQ")
KS <- cdf.test(n84, Vegetation)
KS
plot(KS,style="QQ")
model = ppm(n84, ~ x + y + Height + Vegetation)
model
model1 = ppm(n84, ~ y + Height + Vegetation)
model1
par(mfrow=c(1,1), font = 2, font.axis = 2, font.lab = 4, las = 1, mar = c(0, 0, 1, 0))
plot(model1, se = F, locations = islet_window)
chosen.model = model3
chosen.model = model1
M <- quadrat.test(chosen.model, nx = 4, ny = 2)
M
par(mfrow=c(1,1), font = 2, font.axis = 2, font.lab = 4, las = 1, mar = c(0, 0, 0, 0))
plot(n84, main="")
plot(M, add = TRUE, cex = 1.5, col = "red")
KS1=cdf.test(chosen.model,"y")
KS1
KS2=cdf.test(chosen.model,Vegetation)
KS2
KS3=cdf.test(chosen.model,Height)
KS3
diagnose.ppm(chosen.model, which = "smooth",type="pearson",sigma=50)
sum(eem(chosen.model))/area(n84)
lurking(chosen.model, Height, type = "raw")
model1$fitin$coefs
coef(model1)
confint(model1)
cbind(confint(model1)[,1], coef(model1), confint(model1)[,2])
confint(model1)
confint(model1)
temp = cbind(confint(model1)[,1], coef(model1), confint(model1)[,2])
names(temp)=c(" 2.5 %","mean", " 97.5 %")
temp
temp = cbind(confint(model1)[,1], coef(model1), confint(model1)[,2])
colnames(temp)=c(" 2.5 %","mean", " 97.5 %")
temp
coef(model1)
confint(model1)
plot(khcases, legend=T)
# knitr::opts_chunk$set( echo=F )
knitr::opts_chunk$set( cache=T )
knitr::opts_chunk$set(out.width = '70%')
knitr::opts_chunk$set(fig.align = "center")
knitr::opts_chunk$set(tidy =TRUE)
knitr::opts_chunk$set(message = FALSE)
library(spatstat)
rm(list=ls())
pbc.data <- read.delim("T4/PBCdata2.txt")
head(pbc.data)
poligon=read.delim("T4/PBCpoly.txt")
min.pX = min(poligon$x)
max.pX = max(poligon$x)
min.pY = min(poligon$y)
max.pY = max(poligon$y)
pol.illa<-list(x=poligon$x, y=poligon$y)
pbc.data$marks = factor(pbc.data$marks)
pbc.p = ppp(pbc.data$x,pbc.data$y, poly=pol.illa, range(poligon$x), range(poligon$y), marks = pbc.data$marks)
cases = split(pbc.p, pbc.data$marks)$case
controls = split(pbc.p, pbc.data$marks)$control
par(mfrow=c(1,1), font = 2, font.axis = 2, font.lab = 4, las = 1, mar = c(0, 0, 2.5, 0))
plot(pbc.p$window, main = "Primary Biliary Cirrhosis data")
points(controls, pch = 3, col = "green")
points(cases, pch = 16, col = "red")
legend("right", c("control", "case"), pch = c(3, 16), col=c("green", "red"), bty = "n", cex = 1.2)
library(sparr)
chp <- risk(cases,controls, adapt = T)
M = max(chp$rr)
m = min(chp$rr)
par(mfrow=c(1,1), font = 2, font.axis = 2, font.lab = 4, las = 1, mar = c(0, 0, 1, 0))
plot(chp$rr, gamma = 1.3, main="Relative risk", col=beachcolours(c(m,M)))
cellsize<-chp$rr$xstep*chp$rr$xstep
rho0<-0
ratiorho <- cellsize*sum((chp$rr$v-rho0)^2,na.rm=T)
ratiorho
# Permutation function
perm_rr<-function(){
new_ch<-rlabel(pbc.p)
num = length(pbc.p$x)
indices = sample(1:num)
new_cases <- split(new_ch,  f = pbc.p$marks[indices])$case
new_controls <- split(new_ch, f = pbc.p$marks[indices])$control
new_chp <- risk(new_cases,new_controls)
cellsize<-new_chp$rr$xstep*new_chp$rr$ystep
ratio_perm <- cellsize*sum((new_chp$rr$v-rho0)^2,na.rm=T)
ratio_perm
}
nsim<-99
set.seed(2022)
rperm<-sapply(1:nsim,function(i) perm_rr())
(sum(rperm > ratiorho)+1)/(nsim+1)
s=seq(0,500,length=15)
khcases<-Kest(cases, r=s, correction="best")
khcontrols<-Kest(controls, r=s, correction="best")
plot(khcases, legend=T)
lines(khcontrols$r,khcontrols$iso,lty=2, col="blue")
legend("topleft", legend = c("cases", "controls", "Poisson"), lty=())
plot(khcases, legend=T)
plot(khcases, legend=T)
lines(khcontrols$r,khcontrols$iso,lty=2, col="blue")
legend("topleft", legend = c("cases", "controls", "Poisson"), lty=c(1,1,2))
plot(khcases, legend=T)
lines(khcontrols$r,khcontrols$iso,lty=2, col="blue")
legend("topleft", legend = c("cases", "controls", "Poisson"), lty=c(1,1,2), bty = "n")
plot(khcases, legend=F)
lines(khcontrols$r,khcontrols$iso,lty=2, col="blue")
legend("topleft", legend = c("cases", "controls", "Poisson"), lty=c(1,1,2), bty = "n")
plot(khcases, legend=F)
lines(khcontrols$r,khcontrols$iso,lty=2, col="blue")
legend("topleft", legend = c("cases", "controls", "Poisson"), lty=c(1,1,2))
plot(khcases, legend=F)
lines(khcontrols$r,khcontrols$iso,lty=2, col="blue")
legend("topleft", legend = c("cases", "controls", "Poisson"), lty=c(1,1,2), col = "blue")
plot(khcases, legend=F)
lines(khcontrols$r,khcontrols$iso,lty=1, col="blue")
legend("topleft", legend = c("cases", "controls", "Poisson"), lty=c(1,1,2), col = "blue")
plot(khcases, legend=F)
lines(khcontrols$r,khcontrols$iso,lty=1, col="blue")
legend("topleft", legend = c("cases", "controls", "Poisson"), lty=c(1,1,2), col = c("black", "blue", "red")
plot(khcases, legend=F)
lines(khcontrols$r,khcontrols$iso,lty=1, col="blue")
legend("topleft", legend = c("cases", "controls", "Poisson"), lty=c(1,1,2), col = c("black", "blue", "red"), lwd=2)
plot(khcases, legend=F)
lines(khcontrols$r,khcontrols$iso,lty=1, col="blue")
legend("topleft", legend = c("cases", "controls", "Poisson"), lty=c(1,1,3), col = c("black", "blue", "red"), lwd=2)
pvalue<-2*(sum(abs(T_pm)>abs(T0))+1)/(nsim+1)
simfuns<-as.data.frame(attr(envKdif, "simfuns"))[,-1]
# knitr::opts_chunk$set( echo=F )
knitr::opts_chunk$set( cache=T )
knitr::opts_chunk$set(out.width = '70%')
knitr::opts_chunk$set(fig.align = "center")
knitr::opts_chunk$set(tidy =TRUE)
knitr::opts_chunk$set(message = FALSE)
library(spatstat)
rm(list=ls())
pbc.data <- read.delim("T4/PBCdata2.txt")
head(pbc.data)
poligon=read.delim("T4/PBCpoly.txt")
min.pX = min(poligon$x)
max.pX = max(poligon$x)
min.pY = min(poligon$y)
max.pY = max(poligon$y)
pol.illa<-list(x=poligon$x, y=poligon$y)
pbc.data$marks = factor(pbc.data$marks)
pbc.p = ppp(pbc.data$x,pbc.data$y, poly=pol.illa, range(poligon$x), range(poligon$y), marks = pbc.data$marks)
cases = split(pbc.p, pbc.data$marks)$case
controls = split(pbc.p, pbc.data$marks)$control
par(mfrow=c(1,1), font = 2, font.axis = 2, font.lab = 4, las = 1, mar = c(0, 0, 2.5, 0))
plot(pbc.p$window, main = "Primary Biliary Cirrhosis data")
points(controls, pch = 3, col = "green")
points(cases, pch = 16, col = "red")
legend("right", c("control", "case"), pch = c(3, 16), col=c("green", "red"), bty = "n", cex = 1.2)
library(sparr)
chp <- risk(cases,controls, adapt = T)
M = max(chp$rr)
m = min(chp$rr)
par(mfrow=c(1,1), font = 2, font.axis = 2, font.lab = 4, las = 1, mar = c(0, 0, 1, 0))
plot(chp$rr, gamma = 1.3, main="Relative risk", col=beachcolours(c(m,M)))
cellsize<-chp$rr$xstep*chp$rr$xstep
rho0<-0
ratiorho <- cellsize*sum((chp$rr$v-rho0)^2,na.rm=T)
ratiorho
# Permutation function
perm_rr<-function(){
new_ch<-rlabel(pbc.p)
num = length(pbc.p$x)
indices = sample(1:num)
new_cases <- split(new_ch,  f = pbc.p$marks[indices])$case
new_controls <- split(new_ch, f = pbc.p$marks[indices])$control
new_chp <- risk(new_cases,new_controls)
cellsize<-new_chp$rr$xstep*new_chp$rr$ystep
ratio_perm <- cellsize*sum((new_chp$rr$v-rho0)^2,na.rm=T)
ratio_perm
}
nsim<-99
set.seed(2022)
rperm<-sapply(1:nsim,function(i) perm_rr())
(sum(rperm > ratiorho)+1)/(nsim+1)
s=seq(0,500,length=15)
khcases<-Kest(cases, r=s, correction="best")
khcontrols<-Kest(controls, r=s, correction="best")
plot(khcases, legend=F)
lines(khcontrols$r,khcontrols$iso,lty=1, col="blue")
legend("topleft", legend = c("cases", "controls", "Poisson"), lty=c(1,1,3), col = c("black", "blue", "red"), lwd=2)
Kdif<-function(X, r, cr="iso")
{
k1<-Kest(X[marks(X)=="case"], r=r, correction=cr)
k2<-Kest(X[marks(X)=="control"], r=r, correction=cr)
D=k1[[cr]]-k2[[cr]]
res<-data.frame(r=r, D=D)
return(fv(res, valu="D", fname="D"))
}
nsim<-39
envKdif<-envelope(pbc.p, Kdif, r=s ,nsim=nsim, savefuns=TRUE,simulate=expression(rlabel(pbc.p)))
plot(envKdif,legend=F)
simfuns<-as.data.frame(attr(envKdif, "simfuns"))[,-1]
khcovdiag<-apply(simfuns, 1, var)
T0<-sum( ((khcases$iso-khcontrols$iso)/sqrt(khcovdiag))[-1])
T_pm<-apply(simfuns, 2, function(X){
sum((X/sqrt(khcovdiag))[-1])
})
pvalue<-2*(sum(abs(T_pm)>abs(T0))+1)/(nsim+1)
pvalue
pvalue<-2*(sum(abs(T_pm)>abs(T0))+1)/(nsim+1)
pvalue
simfuns<-as.data.frame(attr(envKdif, "simfuns"))[,-1]
khcovdiag<-apply(simfuns, 1, var)
T0<-sum( ((khcases$iso-khcontrols$iso)/sqrt(khcovdiag))[-1])
T_pm<-apply(simfuns, 2, function(X){
sum((X/sqrt(khcovdiag))[-1])
})
pvalue<-2*(sum(abs(T_pm)>abs(T0))+1)/(nsim+1)
pvalue
Kdif<-function(X, r, cr="iso")
{
k1<-Kest(X[marks(X)=="case"], r=r, correction=cr)
k2<-Kest(X[marks(X)=="control"], r=r, correction=cr)
D=k1[[cr]]-k2[[cr]]
res<-data.frame(r=r, D=D)
return(fv(res, valu="D", fname="D"))
}
nsim<-39
envKdif<-envelope(pbc.p, Kdif, r=s ,nsim=nsim, savefuns=TRUE,simulate=expression(rlabel(pbc.p)))
plot(envKdif,legend=F)
simfuns<-as.data.frame(attr(envKdif, "simfuns"))[,-1]
khcovdiag<-apply(simfuns, 1, var)
T0<-sum( ((khcases$iso-khcontrols$iso)/sqrt(khcovdiag))[-1])
T_pm<-apply(simfuns, 2, function(X){
sum((X/sqrt(khcovdiag))[-1])
})
pvalue<-2*(sum(abs(T_pm)>abs(T0))+1)/(nsim+1)
pvalue
plot(envKdif,legend=F, main="Envelope of the difference between the two functions")
plot(envKdif,legend=F, main="Envelope of the difference \n between the two functions")
plot(envKdif,legend=F, main="Envelope of the difference")
plot(envKdif,legend=F, main="Envelope of the difference")
simfuns<-as.data.frame(attr(envKdif, "simfuns"))[,-1]
khcovdiag<-apply(simfuns, 1, var)
T0<-sum( ((khcases$iso-khcontrols$iso)/sqrt(khcovdiag))[-1])
T_pm<-apply(simfuns, 2, function(X){
sum((X/sqrt(khcovdiag))[-1])
})
pvalue<-2*(sum(abs(T_pm)>abs(T0))+1)/(nsim+1)
pvalue
